{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useFetchData.js\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useFetchData = (year, month, pageUrl) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [years, setYears] = useState([]);\n  const [nextPage, setNextPage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to fetch data\n  const fetchData = async (selectedYear = '', selectedMonth = '', url = 'http://localhost:8000/candidate_test/fronted/') => {\n    setLoading(true);\n    setError(null);\n    let apiUrl = url;\n    if (selectedYear && selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&month=${selectedMonth}`;\n    }\n    try {\n      const response = await axios.get(apiUrl);\n      setData(response.data);\n      setNextPage(response.data.next);\n    } catch (err) {\n      setError('Failed to fetch data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch available years when the component mounts\n  const fetchYears = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/candidate_test/fronted/');\n      const availableYears = new Set(); // Use a Set to store unique years\n\n      // Extract years from the API response\n      response.data.results.forEach(item => {\n        const year = Object.keys(item)[0];\n        availableYears.add(year);\n      });\n      setYears(Array.from(availableYears)); // Convert the Set back to an array\n    } catch (err) {\n      setError('Failed to fetch available years.');\n    }\n  };\n  useEffect(() => {\n    fetchYears(); // Fetch years on initial load\n    fetchData(); // Fetch all data by default\n  }, []);\n  return {\n    data,\n    years,\n    loading,\n    error,\n    fetchData,\n    nextPage\n  };\n};\n_s(useFetchData, \"REpGIMulqPvdN34tJQt/tHgNE/8=\");\nexport default useFetchData;","map":{"version":3,"names":["useState","useEffect","axios","useFetchData","year","month","pageUrl","_s","data","setData","years","setYears","nextPage","setNextPage","loading","setLoading","error","setError","fetchData","selectedYear","selectedMonth","url","apiUrl","response","get","next","err","fetchYears","availableYears","Set","results","forEach","item","Object","keys","add","Array","from"],"sources":["/Users/yatishgoel/Desktop/candidate_test/timestamped-values-frontend/src/hooks/useFetchData.js"],"sourcesContent":["// hooks/useFetchData.js\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchData = (year, month, pageUrl) => {\n  const [data, setData] = useState(null);\n  const [years, setYears] = useState([]);\n  const [nextPage, setNextPage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to fetch data\n  const fetchData = async (selectedYear = '', selectedMonth = '', url = 'http://localhost:8000/candidate_test/fronted/') => {\n    setLoading(true);\n    setError(null);\n    \n    let apiUrl = url;\n    if (selectedYear && selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&month=${selectedMonth}`;\n    }\n\n    try {\n      const response = await axios.get(apiUrl);\n      setData(response.data);\n      setNextPage(response.data.next);\n    } catch (err) {\n      setError('Failed to fetch data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch available years when the component mounts\n  const fetchYears = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/candidate_test/fronted/');\n      const availableYears = new Set(); // Use a Set to store unique years\n\n      // Extract years from the API response\n      response.data.results.forEach(item => {\n        const year = Object.keys(item)[0];\n        availableYears.add(year);\n      });\n\n      setYears(Array.from(availableYears)); // Convert the Set back to an array\n    } catch (err) {\n      setError('Failed to fetch available years.');\n    }\n  };\n\n  useEffect(() => {\n    fetchYears();  // Fetch years on initial load\n    fetchData();   // Fetch all data by default\n  }, []);\n\n  return { data, years, loading, error, fetchData, nextPage };\n};\n\nexport default useFetchData;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMkB,SAAS,GAAG,MAAAA,CAAOC,YAAY,GAAG,EAAE,EAAEC,aAAa,GAAG,EAAE,EAAEC,GAAG,GAAG,+CAA+C,KAAK;IACxHN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAIK,MAAM,GAAGD,GAAG;IAChB,IAAIF,YAAY,IAAIC,aAAa,EAAE;MACjCE,MAAM,GAAG,sDAAsDH,YAAY,UAAUC,aAAa,EAAE;IACtG;IAEA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAACF,MAAM,CAAC;MACxCb,OAAO,CAACc,QAAQ,CAACf,IAAI,CAAC;MACtBK,WAAW,CAACU,QAAQ,CAACf,IAAI,CAACiB,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZT,QAAQ,CAAC,+CAA+C,CAAC;IAC3D,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,+CAA+C,CAAC;MACjF,MAAMI,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAElC;MACAN,QAAQ,CAACf,IAAI,CAACsB,OAAO,CAACC,OAAO,CAACC,IAAI,IAAI;QACpC,MAAM5B,IAAI,GAAG6B,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;QACjCJ,cAAc,CAACO,GAAG,CAAC/B,IAAI,CAAC;MAC1B,CAAC,CAAC;MAEFO,QAAQ,CAACyB,KAAK,CAACC,IAAI,CAACT,cAAc,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZT,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd0B,UAAU,CAAC,CAAC,CAAC,CAAE;IACfT,SAAS,CAAC,CAAC,CAAC,CAAG;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEV,IAAI;IAAEE,KAAK;IAAEI,OAAO;IAAEE,KAAK;IAAEE,SAAS;IAAEN;EAAS,CAAC;AAC7D,CAAC;AAACL,EAAA,CApDIJ,YAAY;AAsDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}