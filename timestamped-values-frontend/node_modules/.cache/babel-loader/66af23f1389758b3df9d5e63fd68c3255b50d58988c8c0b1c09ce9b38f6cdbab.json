{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useFetchData = (year, month, pageSize = 10, pageUrl = null) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [years, setYears] = useState([]);\n  const [nextPage, setNextPage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const months = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n\n  // Function to fetch data\n  const fetchData = async (selectedYear = '', selectedMonth = '', url = 'http://localhost:8000/candidate_test/fronted/') => {\n    setLoading(true);\n    setError(null);\n    let apiUrl = url;\n    if (selectedYear && selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&month=${selectedMonth}&page_size=${pageSize}`;\n    } else if (selectedYear) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&page_size=${pageSize}`;\n    } else if (selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?month=${selectedMonth}&page_size=${pageSize}`;\n    } else {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?page_size=${pageSize}`;\n    }\n    try {\n      const response = await axios.get(apiUrl);\n      setData(prevData => {\n        if (prevData && pageUrl) {\n          return {\n            ...response.data,\n            results: [...prevData.results, ...response.data.results]\n          };\n        }\n        return response.data;\n      });\n      setNextPage(response.data.next);\n    } catch (err) {\n      setError('Failed to fetch data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch available years when the component mounts\n  const fetchYears = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/candidate_test/fronted/');\n      const availableYears = new Set(); // Use a Set to store unique years\n\n      // Extract years from the API response\n      response.data.results.forEach(item => {\n        const year = Object.keys(item)[0];\n        availableYears.add(year);\n      });\n      setYears(Array.from(availableYears)); // Convert the Set back to an array\n    } catch (err) {\n      setError('Failed to fetch available years.');\n    }\n  };\n  useEffect(() => {\n    fetchYears(); // Fetch years on initial load\n    fetchData(); // Fetch all data by default\n  }, []);\n  return {\n    data,\n    years,\n    months,\n    loading,\n    error,\n    fetchData,\n    nextPage\n  };\n};\n_s(useFetchData, \"REpGIMulqPvdN34tJQt/tHgNE/8=\");\nexport default useFetchData;","map":{"version":3,"names":["useState","useEffect","axios","useFetchData","year","month","pageSize","pageUrl","_s","data","setData","years","setYears","nextPage","setNextPage","loading","setLoading","error","setError","months","fetchData","selectedYear","selectedMonth","url","apiUrl","response","get","prevData","results","next","err","fetchYears","availableYears","Set","forEach","item","Object","keys","add","Array","from"],"sources":["/Users/yatishgoel/Desktop/candidate_test/timestamped-values-frontend/src/hooks/useFetchData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchData = (year, month, pageSize = 10, pageUrl = null) => {\n  const [data, setData] = useState(null);\n  const [years, setYears] = useState([]);\n  const [nextPage, setNextPage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const months = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n\n  // Function to fetch data\n  const fetchData = async (selectedYear = '', selectedMonth = '', url = 'http://localhost:8000/candidate_test/fronted/') => {\n    setLoading(true);\n    setError(null);\n    \n    let apiUrl = url;\n    if (selectedYear && selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&month=${selectedMonth}&page_size=${pageSize}`;\n    } else if (selectedYear) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?year=${selectedYear}&page_size=${pageSize}`;\n    } else if (selectedMonth) {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?month=${selectedMonth}&page_size=${pageSize}`;\n    } else {\n      apiUrl = `http://localhost:8000/candidate_test/fronted/?page_size=${pageSize}`;\n    }\n\n    try {\n      const response = await axios.get(apiUrl);\n      setData(prevData => {\n        if (prevData && pageUrl) {\n          return {\n            ...response.data,\n            results: [...prevData.results, ...response.data.results],\n          };\n        }\n        return response.data;\n      });\n      setNextPage(response.data.next);\n    } catch (err) {\n      setError('Failed to fetch data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch available years when the component mounts\n  const fetchYears = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/candidate_test/fronted/');\n      const availableYears = new Set(); // Use a Set to store unique years\n\n      // Extract years from the API response\n      response.data.results.forEach(item => {\n        const year = Object.keys(item)[0];\n        availableYears.add(year);\n      });\n\n      setYears(Array.from(availableYears)); // Convert the Set back to an array\n    } catch (err) {\n      setError('Failed to fetch available years.');\n    }\n  };\n\n  useEffect(() => {\n    fetchYears();  // Fetch years on initial load\n    fetchData();   // Fetch all data by default\n  }, []);\n\n  return { data, years, months, loading, error, fetchData, nextPage };\n};\n\nexport default useFetchData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}